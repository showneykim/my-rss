<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2022-04-23T01:34:54.367Z</id>
    <title>osmos::feed</title>
    <updated>2022-04-23T01:34:54.367Z</updated>
    <generator>osmosfeed 1.14.4</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Podman Desktop Companion]]></title>
        <id>https://news.hada.io/topic?id=6426</id>
        <link href="https://news.hada.io/topic?id=6426"/>
        <updated>2022-04-23T01:01:15.000Z</updated>
        <summary type="html"><![CDATA[데스크탑용 GUI 오픈소스 컨테이너 관리자
윈/맥/리눅스 크로스플랫폼
컨테이너/이미지/가상머신/Secret/볼륨 관리(CMS)
podman 사용법을 익히는 도구로도 유용

...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cog : 머신러닝을 위한 컨테이너 도구]]></title>
        <id>https://news.hada.io/topic?id=6425</id>
        <link href="https://news.hada.io/topic?id=6425"/>
        <updated>2022-04-23T00:39:10.000Z</updated>
        <summary type="html"><![CDATA[머신러닝 모델을 프로덕션 사용가능한 수준으로 패키징 하게 해주는 오픈소스 도구
NVidia 기본 이미지 + 캐싱 + 파이썬 + 환경변수 기본값 등 Best Practice가 다 포함된 도커이미지를 쉽게 생성
Pydantic을 통해서 Op...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[영화/게임/컨셉 디자인등에서 본 HUDs + GUIs 모음]]></title>
        <id>https://news.hada.io/topic?id=6424</id>
        <link href="https://news.hada.io/topic?id=6424"/>
        <updated>2022-04-23T00:27:26.000Z</updated>
        <summary type="html"><![CDATA[영화/게임 등에서 미래의 장면들을 구성할 때 사용하는 HUD 및 GUI 들만 모은 사이트
사이버펑크 2077, 배틀필드 2042, 블랙위도우, 만달로리안 S2, 소셜 딜레마, 스파이더맨..
이메일 뉴스레터
이북 "FUI : How to design user interfaces for film and games." (AUD $5...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing Strong Front-end Test Element Locators]]></title>
        <id>https://css-tricks.com/?p=364218</id>
        <link href="https://css-tricks.com/front-end-test-element-locators/"/>
        <updated>2022-04-22T18:45:38.000Z</updated>
        <summary type="html"><![CDATA[Automated front-end tests are awesome. We can write a test with code to visit a page — or load up just a single component — and have that test code click on things or type text like a user would, …
Writing Strong Front-end Test Element Locators originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Mark Noonan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MongoDB Developer Workshop 후기 (with Google Cloud)]]></title>
        <id>https://rastalion.me/?p=2505</id>
        <link href="https://rastalion.me/mongodb-developer-workshop-%ed%9b%84%ea%b8%b0-with-google-cloud/"/>
        <updated>2022-04-22T14:29:18.000Z</updated>
        <summary type="html"><![CDATA[MongoDB Developer Workshop 후기 (with Google Cloud) 오랜만에 포스팅입니다. 정말 오랜만이네요. 이직하고나서 딱히 쓸 글이 없었습니다. 다들 저보다 잘하시고, 연차는 쌓여가는데 초급 포스팅만 계속 하기도 좀 그랬습니다. 이번에 MongoDB Korea에서 오프라인 핸즈온 세미나를 열었습니다....
The post MongoDB Developer Workshop 후기 (with Google Cloud) appeared first on RastaLion's IT Blog.]]></summary>
        <author>
            <name>Rasta Lion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[뉴스전문 스트리밍 서비스 CNN+ 런칭 한달만에 서비스 종료]]></title>
        <id>https://news.hada.io/topic?id=6423</id>
        <link href="https://news.hada.io/topic?id=6423"/>
        <updated>2022-04-22T05:18:03.000Z</updated>
        <summary type="html"><![CDATA[모회사인 워너미디어와 Discovery가 합병하면서 내려진 결정]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ask GN: 이번 주말에 뭐 하시나요?]]></title>
        <id>https://news.hada.io/topic?id=6422</id>
        <link href="https://news.hada.io/topic?id=6422"/>
        <updated>2022-04-22T05:13:03.000Z</updated>
        <summary type="html"><![CDATA[이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[귀도 반 로섬 : Web3는 불타서 죽어버리게 두세요]]></title>
        <id>https://news.hada.io/topic?id=6421</id>
        <link href="https://news.hada.io/topic?id=6421"/>
        <updated>2022-04-22T05:10:12.000Z</updated>
        <summary type="html"><![CDATA[Web3 도메인에서 파이썬이 쓰일 일 있을까요? 라는 질문에 대한 답변]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[스티브 잡스가 지켰던 '회의 - 3S 미팅 원칙']]></title>
        <id>https://news.hada.io/topic?id=6420</id>
        <link href="https://news.hada.io/topic?id=6420"/>
        <updated>2022-04-22T01:32:10.000Z</updated>
        <summary type="html"><![CDATA[Small List - 이상적 회의 인원은 3~5명 정도!
Short Agenda - 회의 아이템은 3개 이내로!
Short Length - 회의 시간은 30분 이내로!

...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Column - 개발자를 위한 은행]]></title>
        <id>https://news.hada.io/topic?id=6419</id>
        <link href="https://news.hada.io/topic?id=6419"/>
        <updated>2022-04-22T01:20:39.000Z</updated>
        <summary type="html"><![CDATA["Financial services as Code"
개발자들이 새로운 금융상품을 만들수 있도록 설립된 미국의 국가 공인 은행(Chartered)
복잡한 미들웨어 없이 API를 통해서 연준(Federal Reserve)과 연계

계좌간 이체, 새로운 신용카드 만들기, 대출 및 상환등을 API로 호출

...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go는 다음 릴리즈 부터 pdqsort를 사용할 예정]]></title>
        <id>https://news.hada.io/topic?id=6418</id>
        <link href="https://news.hada.io/topic?id=6418"/>
        <updated>2022-04-22T00:58:30.000Z</updated>
        <summary type="html"><![CDATA["Pattern-defeating QuickSort"
랜덤 퀵소트의 빠른 평균 케이스와 힙 소트의 빠른 최악의 케이스를 합치고, 특정 패턴의 입력에 대해서 리니어 시간을 달성하는 최신 정렬 알고리즘
현]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Memray - 블룸버그가 공개한 Python 메모리 프로파일러 오픈소스]]></title>
        <id>https://news.hada.io/topic?id=6417</id>
        <link href="https://news.hada.io/topic?id=6417"/>
        <updated>2022-04-22T00:33:41.000Z</updated>
        <summary type="html"><![CDATA[파이썬 코드의 네이티브 확장이나 인터프리터 내부까지 메모리 할당을 추적하고, 메모리 사용에 관한 다양한 리포트를 작성
CLI 도구 또는 라이브러리로 사용 가능
주요 기능

샘플링이 아닌 모든 함수 호출을 추적
C/C++ 라이브러리의 네이티브 호출까지 처리
매...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding Tailwind CSS to New and Existing WordPress Themes]]></title>
        <id>https://css-tricks.com/?p=364880</id>
        <link href="https://css-tricks.com/adding-tailwind-css-to-wordpress-themes/"/>
        <updated>2022-04-20T15:30:29.000Z</updated>
        <summary type="html"><![CDATA[In the 15 or so years since I started making WordPress websites, nothing has had more of an impact on my productivity — and my ability to enjoy front-end development — than adding Tailwind CSS to my workflow (and it …
Adding Tailwind CSS to New and Existing WordPress Themes originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Greg Sullivan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making Mermaid Diagrams in Markdown]]></title>
        <id>https://css-tricks.com/?p=364908</id>
        <link href="https://css-tricks.com/making-mermaid-diagrams-in-markdown/"/>
        <updated>2022-04-18T16:01:08.000Z</updated>
        <summary type="html"><![CDATA[Mermaid diagrams and flowcharts have been gaining traction, especially with GitHub’s announcement that they are natively supported in Markdown. Let’s take a look at what they are, how to use them, and just as importantly: why.
Just like you …
Making Mermaid Diagrams in Markdown originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Paul Esch-Laurent</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFront 모니터링 하기]]></title>
        <id>https://jojoldu.tistory.com/666</id>
        <link href="https://jojoldu.tistory.com/666"/>
        <updated>2022-04-17T04:59:13.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

최근에 AWS의 서울/도쿄 리전에서 CloudFront 장애가 발생했다.
(착한 트위터의 세계에서는 실시간으로 공유가 된다)
EC2, RDS, ElasticCache에 비해 CloudFront는 모니터링을 잘 안하게 되는데, 장애가 발생하면 서비스 전체에 직격타가 된다.
대부분의 정적 파일 (이미지 등)이 CloudFront를 통한 CDN으로 전달이 되기 때문이다.
그래서 CloudFront가 평소보다 응답이 늦거나 에러 발생율이 높을때를 알 수 있게 모니터링할 필요가 있다.
여기서는 바로 적용할 수 있는 CloudWatch로 모니터링 하는 방법을 소개하지만, 만약 Datadog 같이 전문적인 APM 도구를 사용하고 있다면 APM을 통해 CloudFront를 모니터링하고 알람을 거는 것이 장기적인 관점에서 훨씬 좋다.
Datadog & CloudFront integrations
1. CloudFront 설정
CloudFront의 메트릭 지표를 CloudWatch로 바로 설정하면 좋겠지만, 일부 주요 지표들은 별도의 설정이 되어야만 수집이 가능하다.
추가 설정으로 수집 가능한 지표는 다음과 같다.
캐시 적중율 (Cache Hit Rate)
지연시간 (Origin Latency)
Status별 오류 비율 (Error Rate by status code)
(AWS 공식 문서)
위 지표들 역시 TotalErrorRate 와 더불어 CF 모니터링에 주요하기 때문에 지표 활성화를 꼭 하면 좋다.
설정 방법은 다음과 같다.
원격 측정 -> 모니터링 -> 배포 -> 배포 지표 보기
CloudFront의 원격측정 -> 모니터링으로 이동후, 원하는 ID를 선택후 배포 지표 보기버튼을 클릭한다.
모니터링 개요를 보면 우측 상단에 추가 지표 활성화 버튼을 클릭한다.
기본값이 사용중지이기 때문에 활성화를 선택후 지표 활성화 버튼을 클릭한다.
이렇게 하면 이제 캐시 히트율, 레이턴시등 여러 지표들을 CloudWatch로 수집할 수 있게 된다.
2. CloudWatch 설정
위와 같이 설정이 끝나면 이제 CloudWatch 대시보드에서 추가 지표들을 모니터링할 수 있게 된다.
TotalErrorRate의 경우엔 추가 지표 항목은 아니지만 모든 에러들의 비율을 확인할 수 있기 때문에 대시 보드상에서 추가해놓으면 좋다.
수집 가능한 지표들은 CloudWatch의 경보를 통해 이상지표, 특정 수치 이상으로 튈 경우 Slack 알람 발송이 가능하다.
예를 들어 TotalErrorRate에 대해 Slack 알람발송을 하고 싶다면,
CloudWatch -> 경보 -> 모든 경보 -> 경보생성
으로 들어가 본인이 원하는 이상 수치로 설정해서 알림을 발송할 수 있다.
ErrorRate의 경우 이상 탐지로 해도 괜찮으나, 서비스에 따라 너무 들쑥날쑥한 지표가 된다면 차라리 특정 수치 이상일 경우 알람이 가도록 하는것도 좋다.
여기서는 10%이상일 경우로 지정했다.
그리고 정상 -> 경보, 경보 -> 정상일 경우 Slack 알람이 가도록 구성한다.
(테스트용도로 0%일 경우 발송이 되는지 진행했을때의 슬랙 알람이다.)
CloudWatch 경보 & SNS & Lambda를 통한 Slack 알람 발송의 자세한 구성 방법은 이전에 작성된 포스팅을 참고한다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SonarLint와 SonarCloud 연동하기 (WebStorm Plugin)]]></title>
        <id>https://jojoldu.tistory.com/665</id>
        <link href="https://jojoldu.tistory.com/665"/>
        <updated>2022-04-14T01:35:12.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

지난 시간에 프로젝트와 SonarCloud 연동을 했습니다. 
이번 시간에는 프로젝트와 연결된 SonarCloud를 개발환경인 WebStorm의 SonarLint 플러그인과 연동해서 IDE로 개발 중에도 SonarCloud 검증이 되도록 설정해보겠습니다.
1. 설정
먼저 SonarLint 플러그인을 설치합니다.
설치된 SonarLint 플러그인의 설정을 열어봅니다. 
아래와 같이 Action 검색 (CMD + Shift + A) 을 통해 검색합니다.
다음과 같이 커넥션 연결 화면이 나온다면 Configure the connection 을 선택합니다.
SonarQube / SonarCloud connections의 + 버튼을 클리해서 새로운 커넥션을 추가합니다.
여기서는 SonarCloud를 쓰고 있으니 SonarCloud를 선택합니다.
Next로 넘어가면 Token 입력창이 등장합니다. 
해당 Token 발급을 위해 다시 SonarCloud 로 넘어갑니다. 
SonarCloud의 (우측상단) Profile -> My Account로 차례로 이동합니다.
Security 탭을 보면 Token을 생성할 수 있습니다. 
해당 페이지에서 Token을 생성한 뒤,
IDE Connection 입력창에서 Token을 등록합니다.
그럼 다음과 같이 SonarCloud의 Organization 항목이 나오는데 이를 선택합니다.
그럼 Connection은 완료되었고, 남은 것은 Project key 입니다. 
Project key는 Information -> Project Key, Organization Key 에서 확인할 수 있습니다.
그럼 다음과 같이 설정이 마무리됩니다.
2. 마무리
이렇게 설정이 끝나면 이제 SonarCloud(혹은 SoncarQube) 가 잡아주는 여러 규칙들을 IDE에서도 만날 수 있습니다.
위 Sonar 규칙은 SonarCloud(혹은 SoncarQube)와 동일한 것을 확인할 수 있습니다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[expect에서 false와 falsy 구분하기]]></title>
        <id>https://jojoldu.tistory.com/664</id>
        <link href="https://jojoldu.tistory.com/664"/>
        <updated>2022-04-12T23:39:12.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

Jest로 테스트 코드를 작성하다보면 습관적으로 IDE의 자동완성으로 toBeFalsy 와 toBeTruthy 를 사용하곤 했다.
저 둘이 아닌 toBe(false) 와 toBe(true) 는 한 번의 자동완성으로 안되기 때문에 굳이 사용하진 않았다.
그러다 팀 분의 의견을 받고 더이상 toBeFalsy() 는 사용하진 않고 있다.
물론 이에 맞는 쓰임새가 있겠지만, 모든 결과를 강타입으로 처리하는걸 선호하는 입장에서는 toBeFalsy() 는 선호하기가 어렵다.
다음과 같은 이유 때문이다.
toBeFalsy() 는 JS에서 false로 판단되는 모든 값들을 기준으로 한다
내가 의도한것은 boolean 타입의 false 를 원했지만, 수행 결과가 0, undefined, null, '' 이면 toBeFalsy() 는 통과한다
it('falsy로 검증하면 0도 통과된다', () => {
  const result = calculate(); // result가 0임에도

  expect(result).toBeFalsy();
});

실제로 다음과 같이 테스트 코드를 작성해서 테스트를 해보면 모든 값들이 통과한다
it.each([
  [0],
  [''],
  [false],
  [undefined],
  [null],
])("calculate 결과가 %s이면 toBeFalsy 를 통과한다", (calculateResult) => {
  const result = calculate(calculateResult);

  expect(result).toBeFalsy();
});

그래서 정확하게 boolean:false를 기대한다면 toBe(false) 로 검증해야만 한다.
it('toBe(false)로 검증하면 0은 통과되지 못한다', () => {
  const result = calculate(0);

  expect(result).toBe(false);
});

테스트 코드는 두루뭉실하게 이것도 되고, 저것도 통과되도록 하는 것이 목표는 아니다. 
원하는 결과가 명확하다면 그에 맞게 검증문 작성이 필요하다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add a CSS Lens Flare to Photos for a Bright Touch]]></title>
        <id>https://css-tricks.com/?p=364385</id>
        <link href="https://css-tricks.com/add-a-css-lens-flare-to-photos-for-a-bright-touch/"/>
        <updated>2022-04-12T17:10:13.000Z</updated>
        <summary type="html"><![CDATA[I’m a big fan of movies by J.J. Abrams. I enjoy their tight plots, quippy dialog, and of course: anamorphic lens flares. Filmmakers like Abrams use lens flare to add a dash of ‘homemade’ realism to their movies, …
Add a CSS Lens Flare to Photos for a Bright Touch originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Shimin Zhang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[단언문 (expect/assert) 안에서 비교하지 않기]]></title>
        <id>https://jojoldu.tistory.com/663</id>
        <link href="https://jojoldu.tistory.com/663"/>
        <updated>2022-04-09T16:17:05.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

간혹 코드를 보면 expect 에서 비교를 하는 코드를 보곤 한다. 
이를테면 다음과 같은 경우이다.
it('getCount의 결과는 5보다 크다', () => {
    const result = getCount();

    expect(result > 5).toBe(true);
});
당장 봐서는 문제가 없어보인다. 
오히려 비교값이 더 큰지 검증하는 jest 함수를 별도로 찾아보지 않아도 된다는 장점도 있어보인다.
비슷한 예제로 다음과 같은 코드도 종종 보게 된다.
it('getCount의 값은 10과 동일하다', () => {
    const count = getCount();

    expect(count === 10).toBe(true);
});
하지만 이 테스트 코드들은 크게 2개의 단점을 갖고 있다. 
(정확히는 잘못된 assertion 을 사용하고 있다.)
첫번째는 실패할 경우 실패 원인을 찾기가 어렵다.
이를테면 아래의 코드로 실패할 경우
it('getCount의 값은 10과 동일하다', () => {
    const count = getCount();

    expect(count === 10).toBe(true);
});
결과는 다음과 같이 출력된다.
검증 대상이 count === 10 의 결과인 true 혹은 false 이기 때문에, 실패시 출력되는 실제 받은 값(Received) 역시 true/false 만 나오게 된다.
테스트가 실패했지만 getCount의 결과는 어디서도 확인할 수 없게 된다.
반면에 다음과 같이 테스트 코드를 작성한다면
it('getCount의 값은 10이다', () => {
    const count = getCount();

    expect(count).toBe(10);
});
검증 대상이 getCount() 이기 때문에 실패시 실제 받은 값(Received)을 쉽게 확인할 수 있다.
테스트 코드는 언제든지 실패할 수 있기 때문에 실패시 얼마나 빨리 원인을 찾을 수 있냐는 굉장히 중요하다. 
이게 갖춰지지 않으면 테스트 코드 수정하는데 대부분의 시간을 보내게 된다.
또 하나의 단점은 사람의 언어로 코드가 작성되지 않는다는 점이다.
이건 사람마다 크게 체감하는 바가 다른것 같다.
이를테면 첫번째 코드와 두번째 코드를 사람의 언어로 설명하면 다음과 같다.
expect(result === 10).toBe(true)

getCount의 결과가 10인 것은 참이다.
expect(getCount()).toBe(10)

getCount의 결과는 10이다.
둘의 코드를 사람의 언어로 치환해보면 첫번째 코드가 얼마나 어색한지 체감된다.
테스트 코드는 구현 코드 보다 훨씬 더 사람의 언어를 사용해야한다고 믿고 있다. 
테스트 코드는 당장 PO나 기획자분들이 사용하는 언어 그대로 구현되어야만 코드를 해석하는 노력이 거의 없다고 생각한다. 
그리고 그런 테스트 코드가 결국 오랫동안 유지보수 되고, 프로젝트를 지킬 수 있다.
그래서 단언문(expect/assert) 안에서는 절대 검증하지 않는 것이 좋다.
여담이지만 비슷한 예로 Java로 한다면 다음과 같다.
//bad
assertTrue(a == 1)

//good
assertThat(a).is(1)
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SonarCloud를 통한 Node.js & Jest 프로젝트 정적 분석하기]]></title>
        <id>https://jojoldu.tistory.com/662</id>
        <link href="https://jojoldu.tistory.com/662"/>
        <updated>2022-04-05T12:21:24.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

일반적으로 프로젝트의 코드 퀄리티를 올리기 위해서는 단위 테스트를 비롯해 여러가지 장치를 도입한다. 
이때 가장 가성비가 좋은 작업이 정적 코드 분석을 도입하는 것이다.
정적 코드 분석은 코드내에서 발견할 수 있는 코드 스멜, 잠재적인 결함, 컨벤션 체크, 보안 취약점 등을 코드 레벨에서 분석해서 레포팅 해준다.
이런 정적 코드 분석 도구에는 여러가지가 있지만, 가장 많은 사용자들이 사용하는 도구는 SonarQube(소나큐브) 이다.
기존에는 설치형외에는 지원하지 않았지만, 
최근에는 SaaS 형태로 SonarCloud 가 출시되었다.
Github에 공개된 저장소에 한해서는 소나 클라우드의 전체 기능을 무료로 사용할 수 있다. 
그래서 개인 프로젝트는 SonarCloud로 편하게 연동하고, 무료로 정적 코드 분석을 받아 볼 수 있다.
회사에서 사용한다면 SonarQube를 추천한다. 
아직까지 SonarQube 만큼의 기능이 SonarCloud에서 지원하지 못하고 있다.
SonarCloud or SonarQube? - Guidance on Choosing One for Your Team
그래서 이번 시간에는 이 SonarCloud와 Node.js (with. TypeScript) 프로젝트를 연동해서 정적 분석을 진행해보겠다.
모든 코드는 Github 에 있다.
1. SonarCloud 연동
먼저 SonarC…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding CDN Caching to a Vite Build]]></title>
        <id>https://css-tricks.com/?p=364166</id>
        <link href="https://css-tricks.com/adding-cdn-caching-to-a-vite-build/"/>
        <updated>2022-04-04T18:25:23.000Z</updated>
        <summary type="html"><![CDATA[Content delivery networks, or CDNs, allow you to improve the delivery of your website’s static resources, most notably, with CDN caching. They do this by serving your content from edge locations, which are located all over the world. When a …
Adding CDN Caching to a Vite Build originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Adam Rackis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[어떻게 준비하면 인프랩에 입사할 수 있나요.]]></title>
        <id>https://jojoldu.tistory.com/661</id>
        <link href="https://jojoldu.tistory.com/661"/>
        <updated>2022-04-01T17:30:37.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               


아래는 인프랩의 채용 담당자를 통해 전달받은 메일의 답변을 옮긴것입니다. 
비슷한 메일이 많이 와서 블로그에도 정리하게 되었습니다.

안녕하세요 A님. 
인프랩 개발팀입니다. :)
퇴근하고나서 이메일 주신 내용을 읽어보고나서 답변을 정리해서 전달드립니다.
먼저 오해를 풀고자 하는데요. 
오랫동안 Node.js 백엔드 개발자 채용 공고가 계속 올라가 있는 이유는 원하는 사람의 채용이 안되어서 그런것은 아닙니다 ^^;
저희 같은 IT 기반의 스타트업은 대기업처럼 개발자에 한해서는 TO를 정해놓고 채용을 진행하지 않습니다.
저희가 생각한 인재분이라면 Unlimit으로 채용을 하기 때문에 계속해서 열려있습니다.
구체적으로 말씀드리면,
작년 채용공고를 올리고 현재 6개월정도가 지났습니다.
그 사이에 당시 4명이였던 Node.js 백엔드 개발자팀은 현재 9명이 되었습니다.
그리고 2주뒤에 또 한명의 Node.js 개발자분이 합류하실 예정이라 곧 10명의 팀이 됩니다.
즉, 6~7개월만에 2.5배 인원이 된 것입니다.
그렇지만, 아직도 더 많은 인원을 채용하고자 합니다.
현재 개발팀 규모의 몇배의 인원으로 확장할 계획이고, 아마도 몇년간 채용공고가 내려갈 일은 없을것 같습니다 :)
이건 비단 저희 인프랩만 그런것은 아닙니다.
대부분의 빅테크 스타트업부터 작은 스타트업들까지, 개발자에 한해서는 TO를 정하고 채용하진 않…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tricks to Cut Corners Using CSS Mask and Clip-Path Properties]]></title>
        <id>https://css-tricks.com/?p=364279</id>
        <link href="https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/"/>
        <updated>2022-03-30T16:35:08.000Z</updated>
        <summary type="html"><![CDATA[We recently covered creating fancy borders with CSS mask properties, and now we are going to cut the corners with CSS mask and clip-path! A lot of techniques exist to cut different shapes from the corners of any element. …
Tricks to Cut Corners Using CSS Mask and Clip-Path Properties originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Temani Afif</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[6 Useful Bookmarklets to Boost Web Development]]></title>
        <id>https://css-tricks.com/?p=364118</id>
        <link href="https://css-tricks.com/web-development-bookmarklets/"/>
        <updated>2022-03-28T18:15:41.000Z</updated>
        <summary type="html"><![CDATA[A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.
Activating design mode
…
6 Useful Bookmarklets to Boost Web Development originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Daniel Schwarz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[공급자 지향 플랫폼]]></title>
        <id>https://jojoldu.tistory.com/660</id>
        <link href="https://jojoldu.tistory.com/660"/>
        <updated>2022-03-28T14:50:28.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

요즘 재밌게 보고 있는 웹툰 & 웹소설 중에 네이버 시리즈에 있는 화산귀환이 있다.
웹 소설로 시작해서 그 인기에 힘입어 웹툰으로 나오게 된 작품이다.
웹 소설의 경우 누적 조회수가 2.6억이다. 
네이버 시리즈 최고 히트작 중 하나이다.
처음엔 이 작품을 웹툰으로 시작했다. 
웹툰으로 쭉 보다가 웹 소설로 전향했다. 
이유는 아무리 돈이 있어도 회차가 더 나오지 않아 그 이상 볼 수가 없었기 때문이다.
웹툰에서는 56화밖에 없는 이야기가 웹소설에서는 1183화까지 나와있다. 
그러다보니 다음 이야기가 너무 궁금해서 웹소설로 넘어가서 보고 있다.
그래서 요즘 웹툰은 그냥 작가님을 위한 응원의 마음으로 결제하고, 시간이 될 때마다 웹소설만 본다.
요즘은 굳이 웹툰을 결제해야하나 생각중이다. 
어차피 웹 소설로 다 본 내용이기 때문이다.
이건 참 신기한 일이다. 
웹툰은 컨텐츠를 소비하는 입장으로 장점이 많다.
훨씬 보는 재미가 있다.
훨씬 보기에 편하다.

굳이 글을 다 읽을 필요가 없다
컨텐츠 소비자로서 이만큼 장점이 있음에도 웹소설을 보는게 요즘의 내 모습이라는 것이다.
왜 그럴까 생각해보면 결국 연재주기 때문이라고 생각했다.
웹툰은 1주일에 1회도 어렵다.
(작가님들을 위한 정기휴재는 이제 웹툰에서는 거의 필수로 적용된다)
반면 웹소설은 1주일에 5~7회를 연재한다. 
웬만해서는 휴재도 잘 나지 않는다.…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Action 빌드 결과 Telegram Bot으로 보내기]]></title>
        <id>https://jojoldu.tistory.com/659</id>
        <link href="https://jojoldu.tistory.com/659"/>
        <updated>2022-03-26T12:33:19.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

팀 단위의 프로젝트에서는 Github Action 빌드의 결과를 Slack으로 보내겠지만, 
개인적인 프로젝트에서는 Telegram을 사용할 때가 많다.
메세지 제한이 없고

슬랙은 무료 Plan에서는 채널당 메세지가 10,000개 제한이 있다.
네이티브 앱이라 슬랙에 비해 속도 체감이 심하다
특정 프로젝트의 build 결과를 텔레그램 메신저로 받을 수 있도록 진행한다.
1. bot 생성
먼저 텔레그램 봇을 생성한다.
텔레그램 메신저로 이동하여 BotFather 를 찾는다.
아래와 같이 BotFather 채팅방에서 /newbot을 입력한다
그리고 나선 봇 이름을 등록한다.
봇 이름은 다음과 같은 규칙이 필요하다
XXXBot 혹은 XXX_bot 과 같이 마지막 뒤에 Bot 혹은 _bot 이 들어가야만한다
생성이 완료되었다면, 여기서 끝이 아니고 2개의 값을 가져와야 한다
텔레그램 봇 토큰
텔래그램 봇 채팅방 ID
정상적으로 생성되었다면 위 이미지의 회색 박스처럼 Token 이 나온다. 
이는 잠깐 두고, 
생성된 Bot 채팅방으로 이동해서 간단하게 메세지를 하나 보낸다.
이 메세지를 보내고 나면 이제 텔레그램 API를 통해 채팅방 ID를 가져올 수 있다.
아래 API로 생성된 토큰을 넣어 호출해본다. 
(HTTP Get 요청이라 브라우저에서 직접 입력해도 된다.)
https://api.telegram.org/…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[내가 틀렸네요]]></title>
        <id>https://jojoldu.tistory.com/658</id>
        <link href="https://jojoldu.tistory.com/658"/>
        <updated>2022-03-25T14:22:57.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               


팀에 공유한 내용인데 블로그에도 정리한다.
오늘 주변의 추천으로 희종님의 글을 봤다.
https://ahnheejong.name/articles/i-was-wrong-test/
예전에 어느책에서 봤던 내용인데 (제목은 까먹었다 ㅠㅠ) 
나 스스로 "내가 틀렸네요" 라고 입밖으로 낼 수 있는 용기가 있다면 그사람은 성장하는중이다 라는 이야기를 본적이 있다.
그래서 그 이후로 
"제가 잘못알고 있었네요" 
라고 이야기를 해야하는 순간이 오면 진짜 민망하고, 인정하기 싫었지만, 
"그래도 이걸 이야기하지 않으면 나는 성장하지 못하겠지? 그게 더 무서운거 아닌가?" 
라는 생각으로 어떻게든 내뱉었다.
어떤 일을 하는데 있어 개인이 성장하려면 내가 틀렸음을 인정하고, 이걸 입밖으로 낼 용기를 가지는 것이 필요하다.
이걸 자주 하지 않으면 더이상 주변의 사람들이 부족한점/잘못한점/틀린점에 대해 이야기하지 않게 된다.
어차피 얘기해줘도 인정하지 않을것이고, 변하지도 않을텐데 굳이 감정상하고 싶진 않아서 그렇다.
그렇게 될수록 점점 본인만의 세상에 갇히거나(흔히 말하는 꼰대) 더이상 성장하지 못하는 사람이 된다.
1년에 몇번이나 내가 틀렸음을 이야기했는지
가장 최근에 “너 그거 틀렸어” 피드백을 언제 받았는지
등을 정기적으로 검토해보면 좋다.
특히 일기 쓰면 정말 좋다.
마침 왓챠의 채용공고에 적힌 같이 일하고 싶은 동료 이야기가 보인다.
가장 최근에 "내가 틀렸네요" 라는 말은 언제했는지 찾아봤더니, 
최근에 내가 가이드한 방향이 너무 예전 지식이라 새 방향을 지적받을때 이야기 했었다. 
그 동료에게 정말 감사하다.
희종님의 글 덕분에 다시 한번 "내가 틀렸네요"의 힘을 상기시킬 수 있어서 너무 감사드리고 싶다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFlare Pages로 Next.js 서비스 배포하기]]></title>
        <id>https://jojoldu.tistory.com/657</id>
        <link href="https://jojoldu.tistory.com/657"/>
        <updated>2022-03-25T01:15:44.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

CloudFlare의 정적사이트 플랫폼인 CloudFlare Pages가 출시되었다.
https://pages.cloudflare.com/
이미 Netlify 와 같이 정적 사이트 플랫폼이 많은데 굳이 CloudFlare를 써야하나? 싶었다. 
(저도 그동안은 Netlify을 썼기 때문에)
그럼에도 써봐야하는 이유는 Free Plan의 구성이 말도 안되게 좋기 때문이다.
무제한 사이트 발행
무제한 요청
무제한 대역폭
Free Plan 라고는 믿을수 없을만큼의 좋은 혜택을 제공한다. 
대부분의 정적 사이트가 저정도 혜택은 유료 Plan인걸 고려하면 선택하지 않을 이유가 전혀 없다고 생각했다.
1. Next.js App 생성
먼저 간단한 Next.js App을 생성한다.
여기서 사용된 코드는 모두 Github 에 있다.
npx create-next-app react-in-action --use-npm --example "https://github.com/vercel/next-learn/tree/master/basics/learn-starter"
react-in-action 으로 프로젝트를 생성한다.
이렇게 생성된 샘플 프로젝트에 아래 2가지 설정을 추가한다.
1-1. export 추가
생성된 프로젝트의 package.json 을 열어서 아래와 같이 build 에 next export 를 추가한다
{
  "pri…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
</feed>