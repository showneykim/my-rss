<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2022-05-03T01:51:08.428Z</id>
    <title>osmos::feed</title>
    <updated>2022-05-03T01:51:08.428Z</updated>
    <generator>osmosfeed 1.14.4</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[InfoQ의 2022년 중점 기술들]]></title>
        <id>https://news.hada.io/topic?id=6482</id>
        <link href="https://news.hada.io/topic?id=6482"/>
        <updated>2022-05-03T01:17:04.000Z</updated>
        <summary type="html"><![CDATA[InfoQ는 자신들의 About에 올해 기사 편집시에 집중할 기술들을 정리해두고 매년 업데이트
Innovators
Rust
WASM
eBPF
ML@Edge
Project Loom
Java 16
DeFi
Federated Machine Learning
Differentiated Privacy]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luckysheet - JS 스프레드시트 라이브러리 오픈소스]]></title>
        <id>https://news.hada.io/topic?id=6481</id>
        <link href="https://news.hada.io/topic?id=6481"/>
        <updated>2022-05-03T01:01:52.000Z</updated>
        <summary type="html"><![CDATA[엑셀과 비슷한 기능 제공

포맷팅, 셀/행/열 단위 조작, undo/redo/copy/paste 및 드래그앤드롭
Formula 및 펑션 지원
필터 및 소팅
피봇 테이블, 차트, 댓글, 협업 편집, 사진 넣기..
V3는 TypeScript로 재작성 중

...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ask GN: 새로운 것 하나만 알려주세요]]></title>
        <id>https://news.hada.io/topic?id=6480</id>
        <link href="https://news.hada.io/topic?id=6480"/>
        <updated>2022-05-03T00:43:24.000Z</updated>
        <summary type="html"><![CDATA[남들이 모를만한 것인데 재미나게 얘기해주실 수 있는 것들 있지 않으신가요?
HN의 Teach me someth]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ask GN: Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ? (2022년 5월)]]></title>
        <id>https://news.hada.io/topic?id=6479</id>
        <link href="https://news.hada.io/topic?id=6479"/>
        <updated>2022-05-03T00:34:48.000Z</updated>
        <summary type="html"><![CDATA[현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
멤버가 직접 1개의 댓글로 홍보를 작성"하시면 됩니다. (서치펌 등은 불가)
이 글은 매월 첫번째 월요일에 등록]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fleet - Rust용 빠른 빌드 도구]]></title>
        <id>https://news.hada.io/topic?id=6478</id>
        <link href="https://news.hada.io/topic?id=6478"/>
        <updated>2022-05-03T00:24:02.000Z</updated>
        <summary type="html"><![CDATA[Cargo 보다 최대 5배까지 빠른 빌드 지원
현재는 rustc nightly 만 지원
맥/윈도우/리눅스
GitHub CI/CD 연동 지원

...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reloadium - Advanced Hot Reloading for Python]]></title>
        <id>https://news.hada.io/topic?id=6477</id>
        <link href="https://news.hada.io/topic?id=6477"/>
        <updated>2022-05-03T00:07:01.000Z</updated>
        <summary type="html"><![CDATA[파이썬 앱에 "Edit and Continue" 기능을 제공
함수가 변경될 때마다 재실행
PyCharm용 플러그인 제공(다른 에디터도 지원예정)
Django / Flask 도 저장할 때마다 뷰/앱을 리로드 & 리프레시
SqlAlchemy 에서 함수를 재실행한 후 필요 없는 객체 생기지 않도...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating Realistic Reflections With CSS]]></title>
        <id>https://css-tricks.com/?p=365491</id>
        <link href="https://css-tricks.com/creating-realistic-reflections-with-css/"/>
        <updated>2022-05-02T14:14:07.000Z</updated>
        <summary type="html"><![CDATA[In design, reflections are stylized mirror images of objects. Even though they are not as popular as shadows, they have their moments — just think about the first time you explored the different font formats in MS Word or PowerPoint: …
Creating Realistic Reflections With CSS originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Preethi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jira Release 발생시 Slack에 Release Notes 발행하기]]></title>
        <id>https://jojoldu.tistory.com/670</id>
        <link href="https://jojoldu.tistory.com/670"/>
        <updated>2022-05-02T04:12:39.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

회사 업무를 진행하다보면 매번 자주 하는 작업 중 하나가, 배포공유이다. 
배포가 완료되고, Jira의 티켓들을 Release 하고나면, 어떤 티켓들이 이번에 운영에 배포되었는지를 Slack에 공유하는 것이다.
매번 하는 것이 귀찮으니, 자동화를 진행할 필요가 있다.
1. Jira Rule 생성
Jira에는 자동화를 지원하는 기능이 있다. 
Automation 이라는 기능인데, Jira의 굉장히 많은 기능들을 별도의 앱 없이 자동화를 사용할 수 있도록 한다.
이를 이용하면 Slack / Github / Jenkins 등의 연동을 아주 쉽게 할 수 있다.
이번 글에서도 마찬가지로 Jira Automation을 이용해서 진행한다.
Jira 보드의 좌측에 있는 Project settings를 선택한다.
이동된 좌측 사이드바의 Automation을 선택한 뒤,
Create rule을 클릭한다.
그럼 Automation의 앱을 만들수 있는 페이지로 이동하는데, When (Trigger) -> Then (Action) -> And (Action) 의 템플릿으로 생성이 가능하다.
이 Rule의 트리거는 Jira Version이 release 되었을때이니, 이를 새로운 트리거로 등록한다.
해당 트리거가 발생 후, 실행할 행동을 위해 New action을 선택한다.
어떤 Jira 티켓들을 슬랙으로 보낼지 조회를 할 수 있도록 다음 행동은 Lookup issues를 선택한다. 
해당 액션은 JQL을 통해 티켓들을 가져올 수 있다. 
이를 통해 특정 프로젝트의 해당 버전에 해당하는 티켓들만 가져올 수 있다.
특정 프로젝트의 특정 버전의 티켓들만 가져오기 위해서 다음과 같이 JQL을 작성한다.
project = 프로젝트ID AND fixVersion = '{{version.name}}'
이렇게 가져온 Jira 티켓들의 정보를 Slack으로 보내기 위해 다음 액션을 선택한다.
Slack 연동은 기본적으로 지원하는 액션이라 바로 Slack 을 검색해서 선택한다.
미리 생성해둔 Slack 웹훅 주소를 등록하고, 다음과 같이 슬랙 메세지를 작성한다.
운영 배포 되었습니다. 

version: {{version.name}}
releasedAt: {{now.jqlDateTime.convertToTimeZone("Asia/Seoul")}}

-------- 반영 티켓 --------

{{#lookupIssues}}
- <{{url}}|[{{key}}]> {{summary}}
{{/}}
미리 정의된 시스템 변수들은 다음의 링크들을 참고한다.
https://support.atlassian.com/cloud-automation/docs/what-are-smart-values/
이렇게 Rule 생성이 끝났다면 실제로 Jira Release를 진행해본다.
2. 최종
Jira의 Release 페이지로 이동한뒤,
이번 배포에 해당하는 내용들을 Release 해보면?
다음과 같이 지정된 포맷대로 Jira 티켓들이 Slack 메세지에 정리되어 공유된다.
3. 마무리
여기까지 되었다면, 이후에 본인의 CI환경에 따라 배포가 완료되면 자동으로 Jira Release가 되도록하는것도 이어서 할 수 있다.
Jira version Update API
이 부분은 각자가 사용하는 CI 환경에 따라 많은 차이가 있어서 (까나리배포를 한다던가, 사용하는 도구가 Jenkins / CircleCI / Github Action 등이라던가) 개별적으로 구현한다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[차세대 CFO의 부상 : 재무의 역할 및 기술 스택의 진화]]></title>
        <id>https://news.hada.io/topic?id=6476</id>
        <link href="https://news.hada.io/topic?id=6476"/>
        <updated>2022-05-02T02:02:01.000Z</updated>
        <summary type="html"><![CDATA[재무 전문가들이 주요 의사결정 활동을 지원하기 위해, 비즈니스 전반에 직접 참여 하도록 요청받고 있음
CJ/NDR/FinOps 등 CFO의 책임 영역이 확장
실시간 데이터 접근, 데이터 사이언스 활용, 자동화 등 다양한 기술적인 과제들이 생기고 있음 → 재무 리더를 위한 기술 스택이 필요
...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS/Azure/GCP 외에 알아둬야 할 클라우드 업체는?]]></title>
        <id>https://news.hada.io/topic?id=6475</id>
        <link href="https://news.hada.io/topic?id=6475"/>
        <updated>2022-05-02T01:31:01.000Z</updated>
        <summary type="html"><![CDATA[누군가 SaaS를 첨부터 만든다면 알아둘 업체는 뭐가 있을까요?라는 HN의 질문에 대한 답들
Cloudflare : 가격 경쟁력과 빠른 기술적 대응
Hetzner/OVH : 클라우드는 아니지만, 빠르고 저렴한 Dedicated 서버
Oracle Cloud : 전송량 많을 때 좋음(Zoom이 사용)
Vultr/Digital]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyScript - HTML에서 Python 코드 실행하기]]></title>
        <id>https://news.hada.io/topic?id=6474</id>
        <link href="https://news.hada.io/topic?id=6474"/>
        <updated>2022-05-02T01:13:01.000Z</updated>
        <summary type="html"><![CDATA[Pyodide(WASM) 기반으로 서버 도움없이 브라우저내에서 파이썬 코드를 실행
<py-script> 로 코드 실행, <py-repl> 로 REPL을 컴포넌트 생성
다양한 파이썬 패키지 이용가능 : numpy, pandas, scikit-learn..
Python 과 Javascript 객체간 양방향 통신 지원
버...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[구글, 흑백 이모지 폰트 Noto Emoji 공개]]></title>
        <id>https://news.hada.io/topic?id=6473</id>
        <link href="https://news.hada.io/topic?id=6473"/>
        <updated>2022-05-02T00:39:51.000Z</updated>
        <summary type="html"><![CDATA[색을 제거한 모노크롬 형태라 마음대로 색을 입혀서 사용
가변글꼴(Variable)이어서 light/bold 등 지정 가능
3663개의 이모지를 흑백에 맞춰서 다양하게 변형

국기는 2자리 약자로 표시 : KR,US
사람을 나타내는 이모지는 예전 blob(블롭, 얼룩 모양)로
...]]></summary>
        <author>
            <name>GeekNews - 개발/기술/스타트업 뉴스 서비스</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating the DigitalOcean Logo in 3D With CSS]]></title>
        <id>https://css-tricks.com/?p=365447</id>
        <link href="https://css-tricks.com/creating-the-digitalocean-logo-in-3d-with-css/"/>
        <updated>2022-04-29T14:37:10.000Z</updated>
        <summary type="html"><![CDATA[Howdy y’all! Unless you’ve been living under a rock (and maybe even then), you’ve undoubtedly heard the news that CSS-Tricks, was acquired by DigitalOcean. Congratulations to everyone! 🥳
As a little hurrah to commemorate the occasion, I wanted to …
Creating the DigitalOcean Logo in 3D With CSS originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Jhey Tompkins</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting Up CloudFront to Host Your Web App]]></title>
        <id>https://css-tricks.com/?p=365413</id>
        <link href="https://css-tricks.com/setting-up-cloudfront-to-host-your-web-app/"/>
        <updated>2022-04-28T14:42:48.000Z</updated>
        <summary type="html"><![CDATA[In my last article, we went over how to set up a web app that serves chunks and bundles of CSS and JavaScript from CloudFront. We integrated it into Vite so that when the app runs in a browser, …
Setting Up CloudFront to Host Your Web App originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Adam Rackis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cool Hover Effects That Use Background Properties]]></title>
        <id>https://css-tricks.com/?p=365383</id>
        <link href="https://css-tricks.com/cool-hover-effects-using-background-properties/"/>
        <updated>2022-04-27T14:20:07.000Z</updated>
        <summary type="html"><![CDATA[A while ago, Geoff wrote an article about a cool hover effect. The effect relies on a combination of CSS pseudo-elements, transforms, and transitions. A lot of comments have shown that the same effect can be done using background …
Cool Hover Effects That Use Background Properties originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Temani Afif</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Avoiding the Pitfalls of Nested Components in a Design System]]></title>
        <id>https://css-tricks.com/?p=365359</id>
        <link href="https://css-tricks.com/nested-components-in-a-design-system/"/>
        <updated>2022-04-26T14:30:20.000Z</updated>
        <summary type="html"><![CDATA[When creating a component-based, front-end infrastructure, one of the biggest pain points I’ve personally encountered is making components that are both reusable and responsive when there are nested components within components.
Take the following “call to action” (<CTA />…
Avoiding the Pitfalls of Nested Components in a Design System originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Dan Christofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebStorm에서 TypeScript 파일 단독으로 실행하기]]></title>
        <id>https://jojoldu.tistory.com/669</id>
        <link href="https://jojoldu.tistory.com/669"/>
        <updated>2022-04-26T00:13:18.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

WebStorm에서 기본적으로는 TypeScript 파일만 단독으로 실행할 수는 없다.
단독으로 실행이 필요할 경우 JS 파일로 컴파일 후, 실행해야만 한다.
Run server-side TypeScript with Node.js
이 과정이 개발의 흐름을 많이 끊기 때문에 일반적인 JavaScript 파일을 실행하듯이 TypeScript 실행 환경이 필요하다.
개선
TypeScript 파일만 단독으로 수행하기 개별 플러그인만 설치하면 가능하다.
Run Configuration for TypeScript
해당 플러그인 설치후, 프로젝트에 ts-node 를 설치한다.
yarn add --dev ts-node
그리고 TS 파일을 다시 한번 우클릭 해보면? 
다음과 같이 Run/Debug 실행 버튼이 생성된 것을 확인할 수 있다.
해당 버튼을 클릭해 실제로 수행해본다. 
그럼 다음과 같이 정상적으로 TS 파일이 컴파일 되어 실행되는 것을 확인할 수 있다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[release 브랜치 merge시 Tag 생성, 브랜치 삭제하기 (feat. Gihtub Action)]]></title>
        <id>https://jojoldu.tistory.com/668</id>
        <link href="https://jojoldu.tistory.com/668"/>
        <updated>2022-04-23T07:56:36.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

최근에 상권님의 포스팅을 보고나서 기존 프로젝트의 배포에 대한 추가 자동화를 진행했다.
앱 배포후 Jira에서 버전 Release처리 자동으로 하는 방법(feat. GitHub Action)
상권님의 포스팅에서는 다음과 같이 Github Action 의 자동화를 구성하셨다.
Master 브랜치에서 Push가 발생하면

PR Merge 가 되어도 Master 에서는 Push가 발동된다
Merge Commit으로 발생한 커밋 메세지에서 버저닝 번호만 추출해서 Tag로 생성
반면에 우리 프로젝트는 release 브랜치의 반영이 다음과 같이 진행된다.
그래서 그대로 적용할수는 없었고, 우리팀 스타일에 맞게 개조가 필요했다.
maaster Push가 아니라 PR이 merge가 되었을때만 Github Action이 작동하기

상권님의 Github Action에서는 master Push에서는 전부 Action이 실행 된다.
현재 우리팀의 규칙에서는 모든 Push 를 실행 기준으로 삼지 않았다.
release 브랜치명에서 버전 추출하기

release -> master로 반영할때 Merge Commit을 생성하지 않는다.
그래서 Merge Commit Message에서 버전을 추출할 수가 없다.
(-ff 로 merge 를 진행하며, merge commit 을 남기진 않는다.)
그래서 크게 2가지 다른 점이 있기 때문에 이…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[엔지니어의 세심함]]></title>
        <id>https://jojoldu.tistory.com/667</id>
        <link href="https://jojoldu.tistory.com/667"/>
        <updated>2022-04-23T05:04:10.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

제일 싫어하는 개발자의 유형 중 하나가, 
개발자가 일을 잘하기 위해서 하나부터 열까지 기획자가 다 챙겨야 한다고 생각하는 분들이다.
"A ~ Z까지 엣지케이스, 예외 상황 하나도 빠짐없이 다 기획서에 넣어주세요"
"아 그건 기획서에 없었으니깐 당연히 안했죠"
"그거 자주 잊어먹으니깐 A, B, C에 문서화 해주세요"
등등 엄청 많다.
이걸 병적으로 싫어한다. 
엔지니어외 다른 직무는 엔지니어의 서포트 조직이 아니다.
그래서 팀에 합류하고나서 공들였던 작업중 하나가 엔지니어들의 문서화/커뮤니케이션 문화 개선이였다.
초기 스타트업의 엔지니어분들은 커뮤니케이션/문서화의 세심함이 정말 부족하다.
엔지니어들의 리소스가 절대적으로 부족한 시기이다보니, 
최대한 엔지니어분들의 리소스를 아끼기 위해 엔지니어가 아닌 분들이 정말 많은 서포트를 하게 된다.
개발 용어가 남발한 이야기를 하면 그걸 어떻게든 이해하려고 개인적으로 공부를 하거나
엔지니어가 아닌 분들께 혹시 이것 아는지 물어보거나
엔지니어가 하지 않는 문서화를 대신 하거나
엔지니어가 무지성(?) 개발 할 수 있도록 A-Z까지 예외상황, 엣지케이스 전부를 찾아서 기획문서로 만드는 등등.
엔지니어가 개발/구현에만 집중할 수 있도록 하는 동안, 
엔지니어들의 성의 없는 문서화, 커뮤니케이션의 정리는 주변 동료들의 몫이 된다. 
그리고 엔지니어들의 협업을 위한 세심함도 점점 잃게 된다.
엔지니어가 아닌 분들을 위한 문서화와 커뮤니케이션에 신경을 써야하는 이유는 "우리가 일을 잘하기 위해서" 다.
기획/PO/PM 혹은 그 외 엔지니어가 아닌 직무분들이 개발 용어를 열심히 공부하는 것을 썩 좋아하진 않는다. 
엔지니어가 조금만 더 배려하면 회사 전체의 생산성이 올라간다. 
엔지니어의 생산성만이 가장 중요한 자원은 아니다.
입사한지 1주년이 되었다. 
어제 슬랙에 나온 대화를 보다가 벌써 이만큼 왔다는 생각을 했다.
좋은 코드, 좋은 개발문화 등등 전문성에 대한 개선을 하는 만큼, 
문서화/커뮤니케이션 문화도 점점 정착되는 것 같아서 너무 기분 좋은 주말이다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing Strong Front-end Test Element Locators]]></title>
        <id>https://css-tricks.com/?p=364218</id>
        <link href="https://css-tricks.com/front-end-test-element-locators/"/>
        <updated>2022-04-22T18:45:38.000Z</updated>
        <summary type="html"><![CDATA[Automated front-end tests are awesome. We can write a test with code to visit a page — or load up just a single component — and have that test code click on things or type text like a user would, …
Writing Strong Front-end Test Element Locators originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Mark Noonan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MongoDB Developer Workshop 후기 (with Google Cloud)]]></title>
        <id>https://rastalion.me/?p=2505</id>
        <link href="https://rastalion.me/mongodb-developer-workshop-%ed%9b%84%ea%b8%b0-with-google-cloud/"/>
        <updated>2022-04-22T14:29:18.000Z</updated>
        <summary type="html"><![CDATA[MongoDB Developer Workshop 후기 (with Google Cloud) 오랜만에 포스팅입니다. 정말 오랜만이네요. 이직하고나서 딱히 쓸 글이 없었습니다. 다들 저보다 잘하시고, 연차는 쌓여가는데 초급 포스팅만 계속 하기도 좀 그랬습니다. 이번에 MongoDB Korea에서 오프라인 핸즈온 세미나를 열었습니다....
The post MongoDB Developer Workshop 후기 (with Google Cloud) appeared first on RastaLion's IT Blog.]]></summary>
        <author>
            <name>Rasta Lion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding Tailwind CSS to New and Existing WordPress Themes]]></title>
        <id>https://css-tricks.com/?p=364880</id>
        <link href="https://css-tricks.com/adding-tailwind-css-to-wordpress-themes/"/>
        <updated>2022-04-20T15:30:29.000Z</updated>
        <summary type="html"><![CDATA[In the 15 or so years since I started making WordPress websites, nothing has had more of an impact on my productivity — and my ability to enjoy front-end development — than adding Tailwind CSS to my workflow (and it …
Adding Tailwind CSS to New and Existing WordPress Themes originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Greg Sullivan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making Mermaid Diagrams in Markdown]]></title>
        <id>https://css-tricks.com/?p=364908</id>
        <link href="https://css-tricks.com/making-mermaid-diagrams-in-markdown/"/>
        <updated>2022-04-18T16:01:08.000Z</updated>
        <summary type="html"><![CDATA[Mermaid diagrams and flowcharts have been gaining traction, especially with GitHub’s announcement that they are natively supported in Markdown. Let’s take a look at what they are, how to use them, and just as importantly: why.
Just like you …
Making Mermaid Diagrams in Markdown originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Paul Esch-Laurent</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFront 모니터링 하기]]></title>
        <id>https://jojoldu.tistory.com/666</id>
        <link href="https://jojoldu.tistory.com/666"/>
        <updated>2022-04-17T04:59:13.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

최근에 AWS의 서울/도쿄 리전에서 CloudFront 장애가 발생했다.
(착한 트위터의 세계에서는 실시간으로 공유가 된다)
EC2, RDS, ElasticCache에 비해 CloudFront는 모니터링을 잘 안하게 되는데, 장애가 발생하면 서비스 전체에 직격타가 된다.
대부분의 정적 파일 (이미지 등)이 CloudFront를 통한 CDN으로 전달이 되기 때문이다.
그래서 CloudFront가 평소보다 응답이 늦거나 에러 발생율이 높을때를 알 수 있게 모니터링할 필요가 있다.
여기서는 바로 적용할 수 있는 CloudWatch로 모니터링 하는 방법을 소개하지만, 만약 Datadog 같이 전문적인 APM 도구를 사용하고 있다면 APM을 통해 CloudFront를 모니터링하고 알람을 거는 것이 장기적인 관점에서 훨씬 좋다.
Datadog & CloudFront integrations
1. CloudFront 설정
CloudFront의 메트릭 지표를 CloudWatch로 바로 설정하면 좋겠지만, 일부 주요 지표들은 별도의 설정이 되어야만 수집이 가능하다.
추가 설정으로 수집 가능한 지표는 다음과 같다.
캐시 적중율 (Cache Hit Rate)
지연시간 (Origin Latency)
Status별 오류 비율 (Error Rate by status code)
(AWS 공식 문서)
위 지표들 역시 TotalErrorRate 와 더불어 CF 모니터링에 주요하기 때문에 지표 활성화를 꼭 하면 좋다.
설정 방법은 다음과 같다.
원격 측정 -> 모니터링 -> 배포 -> 배포 지표 보기
CloudFront의 원격측정 -> 모니터링으로 이동후, 원하는 ID를 선택후 배포 지표 보기버튼을 클릭한다.
모니터링 개요를 보면 우측 상단에 추가 지표 활성화 버튼을 클릭한다.
기본값이 사용중지이기 때문에 활성화를 선택후 지표 활성화 버튼을 클릭한다.
이렇게 하면 이제 캐시 히트율, 레이턴시등 여러 지표들을 CloudWatch로 수집할 수 있게 된다.
2. CloudWatch 설정
위와 같이 설정이 끝나면 이제 CloudWatch 대시보드에서 추가 지표들을 모니터링할 수 있게 된다.
TotalErrorRate의 경우엔 추가 지표 항목은 아니지만 모든 에러들의 비율을 확인할 수 있기 때문에 대시 보드상에서 추가해놓으면 좋다.
수집 가능한 지표들은 CloudWatch의 경보를 통해 이상지표, 특정 수치 이상으로 튈 경우 Slack 알람 발송이 가능하다.
예를 들어 TotalErrorRate에 대해 Slack 알람발송을 하고 싶다면,
CloudWatch -> 경보 -> 모든 경보 -> 경보생성
으로 들어가 본인이 원하는 이상 수치로 설정해서 알림을 발송할 수 있다.
ErrorRate의 경우 이상 탐지로 해도 괜찮으나, 서비스에 따라 너무 들쑥날쑥한 지표가 된다면 차라리 특정 수치 이상일 경우 알람이 가도록 하는것도 좋다.
여기서는 10%이상일 경우로 지정했다.
그리고 정상 -> 경보, 경보 -> 정상일 경우 Slack 알람이 가도록 구성한다.
(테스트용도로 0%일 경우 발송이 되는지 진행했을때의 슬랙 알람이다.)
CloudWatch 경보 & SNS & Lambda를 통한 Slack 알람 발송의 자세한 구성 방법은 이전에 작성된 포스팅을 참고한다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SonarLint와 SonarCloud 연동하기 (WebStorm Plugin)]]></title>
        <id>https://jojoldu.tistory.com/665</id>
        <link href="https://jojoldu.tistory.com/665"/>
        <updated>2022-04-14T01:35:12.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

지난 시간에 프로젝트와 SonarCloud 연동을 했습니다. 
이번 시간에는 프로젝트와 연결된 SonarCloud를 개발환경인 WebStorm의 SonarLint 플러그인과 연동해서 IDE로 개발 중에도 SonarCloud 검증이 되도록 설정해보겠습니다.
1. 설정
먼저 SonarLint 플러그인을 설치합니다.
설치된 SonarLint 플러그인의 설정을 열어봅니다. 
아래와 같이 Action 검색 (CMD + Shift + A) 을 통해 검색합니다.
다음과 같이 커넥션 연결 화면이 나온다면 Configure the connection 을 선택합니다.
SonarQube / SonarCloud connections의 + 버튼을 클리해서 새로운 커넥션을 추가합니다.
여기서는 SonarCloud를 쓰고 있으니 SonarCloud를 선택합니다.
Next로 넘어가면 Token 입력창이 등장합니다. 
해당 Token 발급을 위해 다시 SonarCloud 로 넘어갑니다. 
SonarCloud의 (우측상단) Profile -> My Account로 차례로 이동합니다.
Security 탭을 보면 Token을 생성할 수 있습니다. 
해당 페이지에서 Token을 생성한 뒤,
IDE Connection 입력창에서 Token을 등록합니다.
그럼 다음과 같이 SonarCloud의 Organization 항목이 나오는데 이를 선택합니다.
그럼 Connection은 완료되었고, 남은 것은 Project key 입니다. 
Project key는 Information -> Project Key, Organization Key 에서 확인할 수 있습니다.
그럼 다음과 같이 설정이 마무리됩니다.
2. 마무리
이렇게 설정이 끝나면 이제 SonarCloud(혹은 SoncarQube) 가 잡아주는 여러 규칙들을 IDE에서도 만날 수 있습니다.
위 Sonar 규칙은 SonarCloud(혹은 SoncarQube)와 동일한 것을 확인할 수 있습니다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[expect에서 false와 falsy 구분하기]]></title>
        <id>https://jojoldu.tistory.com/664</id>
        <link href="https://jojoldu.tistory.com/664"/>
        <updated>2022-04-12T23:39:12.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

Jest로 테스트 코드를 작성하다보면 습관적으로 IDE의 자동완성으로 toBeFalsy 와 toBeTruthy 를 사용하곤 했다.
저 둘이 아닌 toBe(false) 와 toBe(true) 는 한 번의 자동완성으로 안되기 때문에 굳이 사용하진 않았다.
그러다 팀 분의 의견을 받고 더이상 toBeFalsy() 는 사용하진 않고 있다.
물론 이에 맞는 쓰임새가 있겠지만, 모든 결과를 강타입으로 처리하는걸 선호하는 입장에서는 toBeFalsy() 는 선호하기가 어렵다.
다음과 같은 이유 때문이다.
toBeFalsy() 는 JS에서 false로 판단되는 모든 값들을 기준으로 한다
내가 의도한것은 boolean 타입의 false 를 원했지만, 수행 결과가 0, undefined, null, '' 이면 toBeFalsy() 는 통과한다
it('falsy로 검증하면 0도 통과된다', () => {
  const result = calculate(); // result가 0임에도

  expect(result).toBeFalsy();
});

실제로 다음과 같이 테스트 코드를 작성해서 테스트를 해보면 모든 값들이 통과한다
it.each([
  [0],
  [''],
  [false],
  [undefined],
  [null],
])("calculate 결과가 %s이면 toBeFalsy 를 통과한다", (calculateResult) => {
  const result = calculate(calculateResult);

  expect(result).toBeFalsy();
});

그래서 정확하게 boolean:false를 기대한다면 toBe(false) 로 검증해야만 한다.
it('toBe(false)로 검증하면 0은 통과되지 못한다', () => {
  const result = calculate(0);

  expect(result).toBe(false);
});

테스트 코드는 두루뭉실하게 이것도 되고, 저것도 통과되도록 하는 것이 목표는 아니다. 
원하는 결과가 명확하다면 그에 맞게 검증문 작성이 필요하다.
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add a CSS Lens Flare to Photos for a Bright Touch]]></title>
        <id>https://css-tricks.com/?p=364385</id>
        <link href="https://css-tricks.com/add-a-css-lens-flare-to-photos-for-a-bright-touch/"/>
        <updated>2022-04-12T17:10:13.000Z</updated>
        <summary type="html"><![CDATA[I’m a big fan of movies by J.J. Abrams. I enjoy their tight plots, quippy dialog, and of course: anamorphic lens flares. Filmmakers like Abrams use lens flare to add a dash of ‘homemade’ realism to their movies, …
Add a CSS Lens Flare to Photos for a Bright Touch originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Shimin Zhang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[단언문 (expect/assert) 안에서 비교하지 않기]]></title>
        <id>https://jojoldu.tistory.com/663</id>
        <link href="https://jojoldu.tistory.com/663"/>
        <updated>2022-04-09T16:17:05.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

간혹 코드를 보면 expect 에서 비교를 하는 코드를 보곤 한다. 
이를테면 다음과 같은 경우이다.
it('getCount의 결과는 5보다 크다', () => {
    const result = getCount();

    expect(result > 5).toBe(true);
});
당장 봐서는 문제가 없어보인다. 
오히려 비교값이 더 큰지 검증하는 jest 함수를 별도로 찾아보지 않아도 된다는 장점도 있어보인다.
비슷한 예제로 다음과 같은 코드도 종종 보게 된다.
it('getCount의 값은 10과 동일하다', () => {
    const count = getCount();

    expect(count === 10).toBe(true);
});
하지만 이 테스트 코드들은 크게 2개의 단점을 갖고 있다. 
(정확히는 잘못된 assertion 을 사용하고 있다.)
첫번째는 실패할 경우 실패 원인을 찾기가 어렵다.
이를테면 아래의 코드로 실패할 경우
it('getCount의 값은 10과 동일하다', () => {
    const count = getCount();

    expect(count === 10).toBe(true);
});
결과는 다음과 같이 출력된다.
검증 대상이 count === 10 의 결과인 true 혹은 false 이기 때문에, 실패시 출력되는 실제 받은 값(Received) 역시 true/false 만 나오게 된다.
테스트가 실패했지만 getCount의 결과는 어디서도 확인할 수 없게 된다.
반면에 다음과 같이 테스트 코드를 작성한다면
it('getCount의 값은 10이다', () => {
    const count = getCount();

    expect(count).toBe(10);
});
검증 대상이 getCount() 이기 때문에 실패시 실제 받은 값(Received)을 쉽게 확인할 수 있다.
테스트 코드는 언제든지 실패할 수 있기 때문에 실패시 얼마나 빨리 원인을 찾을 수 있냐는 굉장히 중요하다. 
이게 갖춰지지 않으면 테스트 코드 수정하는데 대부분의 시간을 보내게 된다.
또 하나의 단점은 사람의 언어로 코드가 작성되지 않는다는 점이다.
이건 사람마다 크게 체감하는 바가 다른것 같다.
이를테면 첫번째 코드와 두번째 코드를 사람의 언어로 설명하면 다음과 같다.
expect(result === 10).toBe(true)

getCount의 결과가 10인 것은 참이다.
expect(getCount()).toBe(10)

getCount의 결과는 10이다.
둘의 코드를 사람의 언어로 치환해보면 첫번째 코드가 얼마나 어색한지 체감된다.
테스트 코드는 구현 코드 보다 훨씬 더 사람의 언어를 사용해야한다고 믿고 있다. 
테스트 코드는 당장 PO나 기획자분들이 사용하는 언어 그대로 구현되어야만 코드를 해석하는 노력이 거의 없다고 생각한다. 
그리고 그런 테스트 코드가 결국 오랫동안 유지보수 되고, 프로젝트를 지킬 수 있다.
그래서 단언문(expect/assert) 안에서는 절대 검증하지 않는 것이 좋다.
여담이지만 비슷한 예로 Java로 한다면 다음과 같다.
//bad
assertTrue(a == 1)

//good
assertThat(a).is(1)
            
반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({});]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SonarCloud를 통한 Node.js & Jest 프로젝트 정적 분석하기]]></title>
        <id>https://jojoldu.tistory.com/662</id>
        <link href="https://jojoldu.tistory.com/662"/>
        <updated>2022-04-05T12:21:24.000Z</updated>
        <summary type="html"><![CDATA[반응형

                    
                    (adsbygoogle = window.adsbygoogle || []).push({}); 
               

일반적으로 프로젝트의 코드 퀄리티를 올리기 위해서는 단위 테스트를 비롯해 여러가지 장치를 도입한다. 
이때 가장 가성비가 좋은 작업이 정적 코드 분석을 도입하는 것이다.
정적 코드 분석은 코드내에서 발견할 수 있는 코드 스멜, 잠재적인 결함, 컨벤션 체크, 보안 취약점 등을 코드 레벨에서 분석해서 레포팅 해준다.
이런 정적 코드 분석 도구에는 여러가지가 있지만, 가장 많은 사용자들이 사용하는 도구는 SonarQube(소나큐브) 이다.
기존에는 설치형외에는 지원하지 않았지만, 
최근에는 SaaS 형태로 SonarCloud 가 출시되었다.
Github에 공개된 저장소에 한해서는 소나 클라우드의 전체 기능을 무료로 사용할 수 있다. 
그래서 개인 프로젝트는 SonarCloud로 편하게 연동하고, 무료로 정적 코드 분석을 받아 볼 수 있다.
회사에서 사용한다면 SonarQube를 추천한다. 
아직까지 SonarQube 만큼의 기능이 SonarCloud에서 지원하지 못하고 있다.
SonarCloud or SonarQube? - Guidance on Choosing One for Your Team
그래서 이번 시간에는 이 SonarCloud와 Node.js (with. TypeScript) 프로젝트를 연동해서 정적 분석을 진행해보겠다.
모든 코드는 Github 에 있다.
1. SonarCloud 연동
먼저 SonarC…]]></summary>
        <author>
            <name>향로</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding CDN Caching to a Vite Build]]></title>
        <id>https://css-tricks.com/?p=364166</id>
        <link href="https://css-tricks.com/adding-cdn-caching-to-a-vite-build/"/>
        <updated>2022-04-04T18:25:23.000Z</updated>
        <summary type="html"><![CDATA[Content delivery networks, or CDNs, allow you to improve the delivery of your website’s static resources, most notably, with CDN caching. They do this by serving your content from edge locations, which are located all over the world. When a …
Adding CDN Caching to a Vite Build originally published on CSS-Tricks. You should get the newsletter.]]></summary>
        <author>
            <name>Adam Rackis</name>
        </author>
    </entry>
</feed>